apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.replica.name }}
spec:
  serviceName: {{ .Values.replica.name }}-service   # âœ… fixed
  replicas: {{ .Values.replica.count }}
  selector:
    matchLabels:
      app: {{ .Values.replica.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.replica.name }}
    spec:
      initContainers:
        - name: config
          image: {{ .Values.replica.image }}
          command: [ "sh", "-c" ]
          env:
            - name: NAME
              value: {{ .Values.replica.name }}
            - name: PORT
              value: "{{ .Values.replica.port }}"
          args:
            - |
              cp /tmp/redis/redis.conf /etc/redis/redis.conf
              name=$NAME
              port=$PORT
              echo "finding master..."
              MASTER_FDQN=$(hostname -f | sed -e "s/${name}-[0-9]\./${name}-0./")

              if [ "$(redis-cli -h sentinel -p 5000 ping)" != "PONG" ]; then
                echo "sentinel not found, defaulting to ${name}-0"
                if [ "$(hostname)" = "${name}-0" ]; then
                  echo "this is ${name}-0, not updating config..."
                else
                  echo "updating redis.conf..."
                  echo "replicaof $MASTER_FDQN ${port}" >> /etc/redis/redis.conf
                fi
              else
                echo "sentinel found, finding master"
                MASTER=$(redis-cli -h sentinel -p 5000 sentinel get-master-addr-by-name mymaster \
                  | grep -E "(^${name}-[0-9]{1,})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})")
                echo "master found : $MASTER, updating redis.conf"
                echo "replicaof $MASTER ${port}" >> /etc/redis/redis.conf
              fi
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis/
            - name: config
              mountPath: /tmp/redis/
      containers:
      - name: {{ .Values.replica.name }}
        image: {{ .Values.replica.image }}
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: {{ .Values.replica.port }}
          name: {{ .Values.replica.name }}
        resources:
          requests:
            memory: {{ .Values.replica.resources.requests.memory }}
            cpu: {{ .Values.replica.resources.requests.cpu }}
          limits:
            memory: {{ .Values.replica.resources.limits.memory }}
            cpu: {{ .Values.replica.resources.limits.cpu }}
        livenessProbe:
          exec:
            command: ["redis-cli", "-a", "{{ .Values.masterPassword }}", "-p", "{{ .Values.replica.port }}", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          exec:
            command: ["redis-cli", "-a", "{{ .Values.masterPassword }}", "-p", "{{ .Values.replica.port }}", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/
      volumes:
      - name: redis-config
        emptyDir: {}
      - name: config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.storageClass }}
      resources:
        requests:
          storage: {{ .Values.replica.replicaStorage }}
